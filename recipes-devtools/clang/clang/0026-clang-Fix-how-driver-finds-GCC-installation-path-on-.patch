From c95b551389ae1622faf630be3ddaf0dc62892595 Mon Sep 17 00:00:00 2001
From: David Abdurachmanov <david.abdurachmanov@sifive.com>
Date: Wed, 20 Oct 2021 17:30:36 -0700
Subject: [PATCH] clang: Fix how driver finds GCC installation path on
 OpenEmbedded

Fix how Clang Driver finds GCC installation path on OpenEmbedded

- For RISCV (riscv{32,64}) we define new two multi-lib options without any
  subdirectories (e.g., lib32/ilp32d or lib64/lp64d). OpenEmbedded GCC
  builds don't use them.
- Modify how Clang Driver finds GCC installation path. This is important
  because GCC files on OpenEmbedded are in two different directories:
   (1) /usr/bin/../lib/gcc/riscv64-oe-linux/9.2.0
   (2) /usr/lib/riscv64-oe-linux/9.2.0

Clang Driver will check (1) first. The directory exist, but will produce
no valid multi-libs and there will be no multi-lib selected. (2) contains
actual GCC run-time objects/libraries, but because the path has exact
same GCC version (9.2.0) it will be skipped.

We modify the approach by allowing to check other directories with the same
GCC version. We also avoid picking GCC installation path if it results in
an empty multi-lib list.

Upstream-Status: Pending
Signed-off-by: David Abdurachmanov <david.abdurachmanov@sifive.com>
Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 clang/lib/Driver/ToolChains/Gnu.cpp | 57 ++++++++++++++++++++---------
 1 file changed, 39 insertions(+), 18 deletions(-)

diff --git a/clang/lib/Driver/ToolChains/Gnu.cpp b/clang/lib/Driver/ToolChains/Gnu.cpp
index d883dc3e7558..c627602827c3 100644
--- a/clang/lib/Driver/ToolChains/Gnu.cpp
+++ b/clang/lib/Driver/ToolChains/Gnu.cpp
@@ -1909,23 +1909,38 @@ static void findRISCVMultilibs(const Driver &D,
     return findRISCVBareMetalMultilibs(D, TargetTriple, Path, Args, Result);
 
   FilterNonExistent NonExistent(Path, "/crtbegin.o", D.getVFS());
-  MultilibBuilder Ilp32 =
-      MultilibBuilder("lib32/ilp32").flag("-m32").flag("-mabi=ilp32");
-  MultilibBuilder Ilp32f =
-      MultilibBuilder("lib32/ilp32f").flag("-m32").flag("-mabi=ilp32f");
-  MultilibBuilder Ilp32d =
-      MultilibBuilder("lib32/ilp32d").flag("-m32").flag("-mabi=ilp32d");
-  MultilibBuilder Lp64 =
-      MultilibBuilder("lib64/lp64").flag("-m64").flag("-mabi=lp64");
-  MultilibBuilder Lp64f =
-      MultilibBuilder("lib64/lp64f").flag("-m64").flag("-mabi=lp64f");
-  MultilibBuilder Lp64d =
-      MultilibBuilder("lib64/lp64d").flag("-m64").flag("-mabi=lp64d");
-  MultilibSet RISCVMultilibs =
-      MultilibSetBuilder()
-          .Either({Ilp32, Ilp32f, Ilp32d, Lp64, Lp64f, Lp64d})
-          .makeMultilibSet()
-          .FilterOut(NonExistent);
+
+  MultilibSet RISCVMultilibs;
+
+  if (TargetTriple.getVendor() == llvm::Triple::OpenEmbedded) {
+    MultilibBuilder OpenEmbeddedIlp32d =
+        MultilibBuilder("").flag("+m32").flag("+mabi=ilp32d");
+    MultilibBuilder OpenEmbeddedLp64d =
+        MultilibBuilder("").flag("+m64").flag("+mabi=lp64d");
+    RISCVMultilibs =
+        MultilibSetBuilder()
+            .Either({OpenEmbeddedIlp32d, OpenEmbeddedLp64d})
+            .makeMultilibSet()
+            .FilterOut(NonExistent);
+  } else {
+    MultilibBuilder Ilp32 =
+        MultilibBuilder("lib32/ilp32").flag("-m32").flag("-mabi=ilp32");
+    MultilibBuilder Ilp32f =
+        MultilibBuilder("lib32/ilp32f").flag("-m32").flag("-mabi=ilp32f");
+    MultilibBuilder Ilp32d =
+        MultilibBuilder("lib32/ilp32d").flag("-m32").flag("-mabi=ilp32d");
+    MultilibBuilder Lp64 =
+        MultilibBuilder("lib64/lp64").flag("-m64").flag("-mabi=lp64");
+    MultilibBuilder Lp64f =
+        MultilibBuilder("lib64/lp64f").flag("-m64").flag("-mabi=lp64f");
+    MultilibBuilder Lp64d =
+        MultilibBuilder("lib64/lp64d").flag("-m64").flag("-mabi=lp64d");
+    RISCVMultilibs =
+        MultilibSetBuilder()
+            .Either({Ilp32, Ilp32f, Ilp32d, Lp64, Lp64f, Lp64d})
+            .makeMultilibSet()
+            .FilterOut(NonExistent);
+  }
 
   Multilib::flags_list Flags;
   bool IsRV64 = TargetTriple.getArch() == llvm::Triple::riscv64;
@@ -2945,13 +2960,19 @@ void Generic_GCC::GCCInstallationDetector::ScanLibDirForGCCTriple(
           continue; // Saw this path before; no need to look at it again.
       if (CandidateVersion.isOlderThan(4, 1, 1))
         continue;
-      if (CandidateVersion <= Version)
+      if (CandidateVersion < Version)
         continue;
 
       if (!ScanGCCForMultilibs(TargetTriple, Args, LI->path(),
                                NeedsBiarchSuffix))
         continue;
 
+      // We might have found existing directory with GCCVersion, but it
+      // might not have GCC libraries we are looking for (i.e. return an
+      // empty Mulilibs)
+      if (Multilibs.size() == 0)
+        continue;
+
       Version = CandidateVersion;
       GCCTriple.setTriple(CandidateTriple);
       // FIXME: We hack together the directory name here instead of
