From 76538f80d3c56430c3105b6a3a7614313b01ddc5 Mon Sep 17 00:00:00 2001
From: Frank van der Linden <fvdl@google.com>
Date: Mon, 11 Mar 2024 15:35:32 +0000
Subject: [PATCH] use 64bit alignment for map counter atomic add

For an atomic inc of a map counter (ringbuf loss counter), generate
IR with 64bit alignment. This is more correct, and will avoid problems
with upcoming LLVM versions, as they will emit a function call for
a potentially unaligned atomicrmw. This will lead to an error like this:

error: <unknown>:0:0: in function BEGIN i64 (ptr): t15: i64 = GlobalAddress<ptr @__atomic_compare_exchange> 0 too many arguments

Upstream-Status: Backport [https://github.com/bpftrace/bpftrace/pull/3045/commits/3878a437ca946ab69cc92bcd2cb3c2369625b3dc]
 
Signed-off-by: Wentao Zhang <wentao.zhang@windriver.com>
---
 CHANGELOG.md             | 2 ++
 src/ast/irbuilderbpf.cpp | 2 +-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4fa3b673..81b6e0e2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -19,6 +19,8 @@ and this project adheres to
 #### Fixed
 - Fix field resolution on structs with anon union as first field
   - [#2964](https://github.com/bpftrace/bpftrace/pull/2964)
+- Fix alignment of atomic map counter update
+  - [#3045](https://github.com/bpftrace/bpftrace/pull/3045)
 #### Docs
 #### Tools
 
diff --git a/src/ast/irbuilderbpf.cpp b/src/ast/irbuilderbpf.cpp
index 2ff3c0ce..98c4b0d5 100644
--- a/src/ast/irbuilderbpf.cpp
+++ b/src/ast/irbuilderbpf.cpp
@@ -1474,7 +1474,7 @@ void IRBuilderBPF::CreateAtomicIncCounter(const std::string &map_name,
   CREATE_ATOMIC_RMW(AtomicRMWInst::BinOp::Add,
                     val,
                     getInt64(1),
-                    1,
+                    8,
                     AtomicOrdering::SequentiallyConsistent);
   CreateBr(lookup_merge_block);
 
-- 
2.35.5

